import { db } from "@/services/database/dexieConfig";

/**
 * Guarda o actualiza un cliente en la base de datos local.
 * Dexie's put() se encarga de la lógica "upsert" (update or insert).
 * Usa el DNI como clave única.
 * @param {object} clientData - Los datos del cliente (ej. datosAgricultor).
 * @returns {Promise<number>} El ID local del registro.
 */
export const putClient = async (clientData) => {
  // 1. Buscar si ya existe un cliente con este DNI.
  const existingClient = await db.clients
    .where("dni")
    .equals(clientData.dni)
    .first();

  if (existingClient) {
    // 2. Si existe, lo actualizamos con los nuevos datos.
    // Usamos el localId existente para asegurarnos de que actualizamos el registro correcto.
    return await db.clients.update(existingClient.localId, {
      ...existingClient, // Mantenemos los datos antiguos que no cambian
      ...clientData, // Sobrescribimos con los datos nuevos del formulario
      timestampUltimaModificacion: new Date(),
    });
  } else {
    // 3. Si no existe, creamos un nuevo registro.
    // Dexie se encargará del 'localId' autoincremental.
    return await db.clients.add({
      ...clientData,
      timestampCreacion: new Date(),
    });
  }
};

/**
 * Busca clientes en la base de datos local por nombre o DNI.
 * @param {string} query - El término de búsqueda.
 * @returns {Promise<Array<object>>} Un array con los clientes que coinciden.
 */
export const searchClients = async (query) => {
  if (!query) return [];
  // Busca si el DNI o el nombre comienzan con el término de búsqueda (insensible a mayúsculas)
  return await db.clients
    .where("dni")
    .startsWithIgnoreCase(query)
    .or("celular")
    .startsWithIgnoreCase(query)
    .or("nombre")
    .startsWithIgnoreCase(query)
    .limit(10) // Limita los resultados para mejor rendimiento
    .toArray();
};
